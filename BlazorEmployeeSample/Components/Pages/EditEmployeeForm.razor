@page "/edit/{EmployeeId:int}"
@using BlazorEmployeeSample.DataAccess
@using BlazorEmployeeSample.Models
@inject IEmployeeRepository EmployeeRepository
@inject NavigationManager Navigation

<h3>Edit Employee</h3>

@if (Employee != null)
{
    <div class="form-group">
        <label for="employeeId">Employee ID</label>
        <input type="text" class="form-control" id="employeeId" value="@Employee.EmployeeId" disabled />
    </div>
    <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" class="form-control" id="firstName" value="@EmployeeEntity.FirstName" @oninput="@(e => EmployeeEntity.FirstName = e.Value.ToString())" />
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" class="form-control" id="lastName" value="@EmployeeEntity.LastName" @oninput="@(e => EmployeeEntity.LastName = e.Value.ToString())" />
    </div>
    <div class="form-group">
        <label for="hireDate">Hire Date</label>
        <input type="date" class="form-control" id="hireDate" value="@EmployeeEntity.HireDate.GetValueOrDefault().ToString("yyyy-MM-dd")" @oninput="@(e => EmployeeEntity.HireDate = DateOnly.Parse(e.Value.ToString()))" />
    </div>
    <div class="form-group" id="address">
        <label for="address1">Street Address 1</label>
        <input type="text" class="form-control" id="address1" value="@EmployeeEntity.Address.Address1" @oninput="@(e => EmployeeEntity.Address.Address1 = e.Value.ToString())" />
        <label for="address2">Street Address 2</label>
        <input type="text" class="form-control" id="address2" value="@EmployeeEntity.Address.Address2" @oninput="@(e => EmployeeEntity.Address.Address2 = e.Value.ToString())" />
        <label for="city">City</label>
        <input type="text" class="form-control" id="city" value="@EmployeeEntity.Address.AddressCity" @oninput="@(e => EmployeeEntity.Address.AddressCity = e.Value.ToString())" />
        <label for="state">State</label>
        <input type="text" class="form-control" id="state" value="@EmployeeEntity.Address.AddressState" @oninput="@(e => EmployeeEntity.Address.AddressState = e.Value.ToString())" />
        <label for="zip">Zip Code</label>
        <input type="text" class="form-control" id="zip" value="@EmployeeEntity.Address.AddressZip" @oninput="@(e => EmployeeEntity.Address.AddressZip = e.Value.ToString())" />
    </div>

    <button class="btn btn-primary" @onclick="async () => await Save()">Save</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
}
else
{
    <p><em>Loading...</em></p>
}


@code {

    [Parameter]
    public int EmployeeId { get; set; }

    private Employee? Employee { get; set; } = new Employee();

    private Employee EmployeeEntity { get; set; } = new Employee();

    protected override async Task OnInitializedAsync()
    {
        Employee = await EmployeeRepository.GetEmployeeAsync(EmployeeId);
        EmployeeEntity = Employee!;

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        await EmployeeRepository.UpdateEmployeeAsync(EmployeeEntity);
        Navigation.NavigateTo("/");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }
}
