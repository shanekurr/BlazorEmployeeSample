@page "/employee/edit/{EmployeeId:int}"
@using BlazorEmployeeSample.Models
@using BlazorEmployeeSample.DataAccess
@inject IEmployeeRepository EmployeeRepository
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Edit Employee</h3>

@if (Employee != null)
{
    <div class="container-sm py-5">
        <EditForm Model="Employee" OnValidSubmit="async () => await Save()">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <form class="row g-3 p-2">
                <div class="row">
                    <div class="col-md-4">
                        <label for="employeeId">Employee ID</label>
                        <InputNumber class="form-control" id="employeeId" @bind-Value="Employee.EmployeeId" disabled/>
                    </div>
                    <div class="col-md-8"></div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="Employee.FirstName"/>
                    </div>
                    <div class="col-md-6">
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="Employee.LastName"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label for="jobTitle">Job Title</label>
                        <InputText id="jobTitle" class="form-control" @bind-Value="Employee.JobTitle"/>
                    </div>
                    <div class="col-md-6">
                        <label for="hireDate">Hire Date</label>
                        <InputDate id="hireDate" class="form-control" @bind-Value="Employee.HireDate"/>
                    </div>
                </div>
            </form>
            <button class="btn btn-primary" type="submit">Save</button>
            <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </EditForm>
    </div>
    <div class ="container-md py-2" >
        @if (Employee.Addresses.Count > 0)
        {
            <h3>Addresses</h3>
            
                <div class ="container-sm py-3" >
                     <div class="row">
                         <div class="col-3">
                             Address
                         </div>
                         <div class="col-3">
                             Address 2
                         </div>
                         <div class="col">
                             City
                         </div>
                         <div class="col-1">
                             State
                         </div>
                         <div class="col-1">
                             Zip
                         </div>
                     </div>
                    @foreach(var address in Addresses)
                    {
                        <AddressRow Address="address"/>
                    }
                </div>
        }
        <button class="btn btn-secondary" @onclick="AddAddress">Add Address</button>
    </div>
}
else
{
    <p>
        <em>Loading...</em>
    </p>
}
@if (IsError)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@code {

    [Parameter] public int EmployeeId { get; set; }

    private Employee? Employee { get; set; } = new();
    
    private List<Address> Addresses { get; set; } = new List<Address>();
    
    private bool IsError { get; set; }
    
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employee = await EmployeeRepository.GetEmployeeAsync(EmployeeId);
        if (Employee == null)
        {
            ErrorMessage = "Employee not found.";
            IsError = true;
        }
        else
        {
            Addresses = Employee.Addresses.ToList();    
        }
        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        try
        {
            await EmployeeRepository.UpdateEmployeeAsync(Employee);
            Navigation.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            IsError = true;
            ErrorMessage = ex.Message;
        }
    }

    private void AddAddress()
    {
        Navigation.NavigateTo($"/address/add/{EmployeeId}", true);
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/", true);
    }

    private void ConfirmDelete()
    {
        Navigation.NavigateTo($"/employee/delete/{EmployeeId}", true);
    }

}